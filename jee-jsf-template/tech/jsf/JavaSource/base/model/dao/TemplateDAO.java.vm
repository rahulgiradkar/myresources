package ${data.config.mainPackage}.${data.crud.moduleName}.${data.bundle.get('package.mvc.model')}.${data.bundle.get('package.mvc.model.dao')};
#set ($varClassName = $stringUtils.unCapitalizeFirstLetter(${data.crud.crudClass.name}))
#set ($typeClassName = ${data.crud.crudClass.name})

#set ($varCrudName = $stringUtils.unCapitalizeFirstLetter(${data.crud.name}))
#set ($typeCrudName = ${data.crud.name})

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;
import javax.persistence.Query;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.MatchMode;
import javax.faces.application.FacesMessage;
import org.springframework.stereotype.Component;
import ${data.config.mainPackage}.${data.bundle.get('package.base')}.${data.bundle.get('package.mvc.model')}.${data.bundle.get('package.mvc.model.dao')}.${data.bundle.get('package.mvc.model.dao.generico')}.GenericDAO;
import ${data.crud.crudClass.fullName};
import ${data.config.mainPackage}.${data.bundle.get('package.base')}.${data.bundle.get('package.mvc.model')}.exceptions.${stringUtils.normalizeClassName(${data.config.appName})}Exception;

/**
 *
 * @author ${data.bundle.get('generator.name')}
 */
@Component("${varCrudName}DAO")
public class ${typeCrudName}DAO extends GenericDAO<${typeClassName}>{

	@Override
	protected Class<${typeClassName}> getClasseEntidade() {
		return ${typeClassName}.class;
	}

	/**
	 * Metodo de consulta de ${typeClassName}
	 * @param ${typeClassName}
	 * @return Lista de ${varClassName}
	 */
	public List<${typeClassName}> ${data.bundle.get('crud.method.search')}(${typeClassName} ${varClassName}) throws ${stringUtils.normalizeClassName(${data.config.appName})}Exception{

		List<${typeClassName}> result${typeCrudName} = null;

		try {
			Session s = (Session) getJpaTemplate().getEntityManager().getDelegate();
			Criteria c = s.createCriteria(${typeClassName}.class);

    			c.add(Example.create(${varClassName}).enableLike(MatchMode.ANYWHERE));

			result${typeCrudName} = c.list();

		} catch (Exception e) {
			throw new ${stringUtils.normalizeClassName(${data.config.appName})}Exception("::[" + getClass().getSimpleName() + "]-Search error: ", e, FacesMessage.SEVERITY_FATAL);
		}

		return result${typeCrudName};

	}

#foreach( $field in $data.crud.crudClass.fieldsInOrder )
#set ($varFieldName = $stringUtils.capitalizeFirstLetter(${field.name}))
#if(($field.getHtmlType().getType() == "html.type.combo") && ($field.getClassDataType() != "java.lang.Character") && ($field.getClassDataType() != "char"))

	public List<javax.faces.model.SelectItem> popularCombo${varFieldName}() {
		List<javax.faces.model.SelectItem> popularCombo${varFieldName} = new ArrayList<javax.faces.model.SelectItem>();
		List<${field.classDataType}> resultadoCombo${varFieldName} = getJpaTemplate().find("FROM ${field.classDataType} obj");
		
		for(${field.classDataType} i : resultadoCombo${varFieldName}){			
			popularCombo${varFieldName}.add(new javax.faces.model.SelectItem(i, i.getDescricao()));
		}
		return popularCombo${varFieldName};
	}
#elseif(($field.getHtmlType().getType() == "html.type.radio") && ($field.getClassDataType() != "java.lang.Character") && ($field.getClassDataType() != "char"))

	public List<javax.faces.model.SelectItem> popularRadio${varFieldName}() {
		List<javax.faces.model.SelectItem> popularRadio${varFieldName} = new ArrayList<javax.faces.model.SelectItem>();
		List<${field.classDataType}> resultadoRadio${varFieldName} = getJpaTemplate().find("FROM ${field.classDataType} obj");
		
		for(${field.classDataType} i : resultadoRadio${varFieldName}){			
			popularRadio${varFieldName}.add(new javax.faces.model.SelectItem(i, i.getDescricao()));
		}
		return popularRadio${varFieldName};
	}
#elseif(($field.getHtmlType().getType() == "html.type.suggestionbox"))

	@SuppressWarnings("unchecked")
	public List<${field.classDataType}> get${varFieldName}SuggestionBox(String valor){	

		List<${field.classDataType}> resultadoGet${varFieldName} = null;

		try {

			Query query = getJpaTemplate().getEntityManager().createQuery("FROM ${field.classDataType} obj where obj.nomeMunicipio like :valor order by obj.nomeMunicipio");
			query.setParameter("valor", valor.toUpperCase() + "%");

			resultadoGet${varFieldName} = query.getResultList();

		} catch (Exception e) {
			logger.fatal("::[$typeCrudNameDAO]-Erro get${varFieldName}SuggestionBox: ", e);
		}

		return resultadoGet${varFieldName};
	}

#end
#end
}
