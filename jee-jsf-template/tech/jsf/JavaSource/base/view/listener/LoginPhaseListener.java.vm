package ${data.config.mainPackage}.${data.bundle.get('package.base')}.${data.bundle.get('package.mvc.view')}.${data.bundle.get('package.mvc.view.listener')};

import javax.faces.application.Application;
import javax.faces.application.NavigationHandler;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.PhaseEvent;
import javax.faces.event.PhaseId;
import javax.faces.event.PhaseListener;
import javax.servlet.http.HttpSession;

import ${data.config.mainPackage}.${data.bundle.get('package.base')}.${data.bundle.get('package.mvc.view')}.UsuarioBean;
/**
 *
 * @author ${data.bundle.get('generator.name')}
 */
public class LoginPhaseListener implements PhaseListener {

   private static final long serialVersionUID = 8403402696846718508L;
   private static final String[] EXCECOES = new String[]{".xcss", "/sessaoExpirada."};

   public void afterPhase(PhaseEvent event) {

	FacesContext context = event.getFacesContext();
        String viewId = context.getViewRoot().getViewId();
        UsuarioBean usuarioBean = getUsuarioBean(context);

        if(viewId.startsWith("/pages/logout.") || viewId.startsWith("/pages/login.")){

        	ExternalContext externalContext = context.getExternalContext();
            HttpSession httpSession = (HttpSession) externalContext.getSession(false);
            httpSession.invalidate();

        }else if(!isExcecao(viewId) && usuarioBean.isUsuarioLogado() == false){

        	navigateToView(context, "login");
        }

    }    

    private UsuarioBean getUsuarioBean(FacesContext context) {
    	return (UsuarioBean) context.getApplication().evaluateExpressionGet(context, "#{usuarioBean}", UsuarioBean.class);
    }

    private void navigateToView(FacesContext context, String view) {

    	Application application = context.getApplication();
        NavigationHandler navigationHandler = application.getNavigationHandler();
        navigationHandler.handleNavigation(context, null, view);

    }

    private boolean isExcecao(String viewId) {

    	for (String view : EXCECOES) {

    		if (viewId.indexOf(view) >= 0) {
                return true;
            }
        }

        return false;
    }

    public void beforePhase(PhaseEvent event) {
        // no
    }

    public PhaseId getPhaseId() {
        return PhaseId.RESTORE_VIEW;
    }
}
